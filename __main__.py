#!/usr/bin/env python
from __future__ import division
from jester import input
from jester import sampleReg
from jester import test
from jester import test_summary
from jester import collect
from jester import correlate
import sys
import pdb
import numpy as np
import scipy as sp
import pandas as pd
from scipy import stats
from math import exp
from time import time
from optparse import OptionParser,OptionGroup
from IPython import embed

def main(argv):
    usage = """usage: %prog [options] --[t|b]file fileBase outfileBase
            Basic usage:
                ./jester --[sample/test] -v --JointTestingWindow 50
                    --file plinkBinaryFile --covfile covfile --out outputFile"""
    parser = OptionParser(usage=usage)
    basicGroup = OptionGroup(parser, "Basic Options")
    advGroup = OptionGroup(parser, "Advanced Options")
    basicGroup.add_option("--file", dest="fbase", help="Base filename, without"
                          " extension", default=None)
    basicGroup.add_option("--type", dest="ftype", help="Specify file type. "
                          "Options are [b,t,e,g,i,s] corresponding to plink BED"
                          ", plink TPED, EMMA, geno, Impute2 gens, and Summary"
                          "Statistic file formats.",default='b')
    basicGroup.add_option("--covfile", dest="covFile", default=None,
                          help="The location of a plink format covariate file")
    basicGroup.add_option("--alpha", dest="alpha",help="Desired level-alpha sig"
                          "nificance threashold (Default = 0.05)",default=0.05)
    basicGroup.add_option("--numSamples", dest="numSamples", help="Number of"
                          " samples. (Default = 1000)", default=1000)
    basicGroup.add_option("--emmaPHENO", dest="emmaPheno", default=None,
                          help="Location of EMMA phenotype file")
    basicGroup.add_option("--phenofile", dest="phenoFile", default=None,
                          help="Specify phenotype file location. Without this"
                          " argument the program will look for a .pheno that "
                          " has the plinkFileBase root")
    basicGroup.add_option("--sampleFile", dest="sampleFile", default=None,
                          help="To be used with --gens. File containing sample "
                          "information, Impute2 sample type. Two header lines "
                          "followed by sample information, one sample a line.")
    basicGroup.add_option("-v", "--verbose", action="store_true",
                          dest="verbose", default=False, help="Print more info")
    basicGroup.add_option("-s","--sample", dest="sMode",action="store_true",
                          default=False,
                          help="Run jester in sample mode, sampling test "
                          "statistics under the null to compute the multiple "
                          "testing correction")
    basicGroup.add_option("-t","--test", dest="tMode",action="store_true",
                          default=False,
                          help="Run jester in test mode using the specified"
                          " joint testing regimine")
    basicGroup.add_option("-c","--collect",dest="cMode",action="store_true",
                          default=False,help="Use this to compute the MTC from"
                          "the samples generated by sample mode. In this case"
                          "--file should point to the fbase for the samples.")
    basicGroup.add_option("--correlate", dest="rMode",action="store_true",
                          default=False,help="Use this mode to compute and save"
                          "the genotype panel. Useful with summary statistics"
                          "association mode.")
    basicGroup.add_option("--rFile",dest="rFile",help="Specify file containing"
                          "correlations. For use with joint testing from"
                          "summary statistics.")
    basicGroup.add_option("--frq",dest="frqFile",help="Provide a plink.frq file"
                          " for sum stats impotation to assure correct allele"
                          "orientation")
    basicGroup.add_option("--out",dest="outFile",default=None,
                          help="Output file base name.")
    # basicGroup.add_option("-p", type="int", dest="pheno",
    # help="The phenotype index to be used in association.", default=0)
    # TODO: Implement and Test this.
    advGroup.add_option("--TwoWindows",action="store_true",dest="twoWindows",
                        default=False, help="With this option specified, jester"
                        " will only test potentially linkage masked things in"
                        " the approx window, but will test all things in the "
                        "smaller testing window.")
    advGroup.add_option("--cross",action="store_true",dest="crossTest",
                        default=False, help="By default, jester computes the"
                        "joint test. With this option it additionally"
                        "computes the interaction (g1*g2) test. (Note:"
                        "This increases compute time substatnially.")
    advGroup.add_option("--RemoveMissing", action="store_true",
                        dest="removeMissing", default=False,
                        help="By default the program replaces missing "
                        "genotypes with the MAF. This option drops them,"
                        "but might break Chi2 statistic calculations." )
    advGroup.add_option("--NormalizeGenotypes", action="store_true",
                        dest="normalizeGenotype", default=False,
                        help="By default the program uses unnormalized"
                        "genotypes. This option over-rides that behavior "
                        "and rescales all genotypes to mean 0 variance 1.")
    advGroup.add_option("--noMean", dest="noMean", default=False,
                        action="store_true", help="The program will "
                        "automatically add a global mean covariate to the "
                        "model unless this option is specified.")
    advGroup.add_option("--ApproxWindow", dest="wr", help="Sets the sliding "
                        "window approximation size. (Default = 100)",
                        default=100)
    # TODO: Allow JointTestingWindow to exceed ApproxWindow ?
    advGroup.add_option("--JointTestingWindow", dest="wt", help="Sets the joint"
                        " testing window size. Cannot be larger than "
                        "ApproxWindow (Default = 100)", default=100)
    advGroup.add_option("--JointTestingWindowStep", dest="wStep", help="If you"
                        "want to compute the testing penalty for several window"
                        " sizes, this sets the interval.  (Default = 0)",
                        default=0)
    advGroup.add_option("--minMAF",dest="minMAF",help="Sets the MAF filter."
                        " (Default = 0.05)",default=0.05)
    advGroup.add_option("--seed",dest="seed",help="Sets the numpy seed. Default"
                        " is unset.",default=0)
    advGroup.add_option("--r2Min", dest = "rMin", help="Sets the minimum "
                        "squared corrleation required for joint testing."
                        "(Default = 0.0) ", default=0.0)
    advGroup.add_option("--r2Max", dest = "rMax", help="Sets the maximum "
                        "squared correletion for joint test. (Default = 1.0)",
                        default=1.0)
    advGroup.add_option("--rRange",dest="rRange",default=False,
                        action="store_true",help="With this option the MTC"
                        "will be computed for a range of correlation cutoffs")
    advGroup.add_option("-L", dest = "L", help="Sets the length of analysis. "
                        "Default is whole input.", default=0)
    advGroup.add_option("--minp", dest="minp", help="Sets the minimum expected"
                        "p-value for doing the joint test. Defult is 1e-05. Set"
                        "to 1 to fit the model for every pair.", default=1e-05)
    advGroup.add_option("--LMO",dest='LMO',default=False,action="store_true")
    advGroup.add_option("--from_bp",dest='from_bp',default=None,type=int)
    advGroup.add_option("--to_bp",dest='to_bp',default=None,type=int)


    parser.add_option_group(basicGroup)
    parser.add_option_group(advGroup)
    (options, args) = parser.parse_args()

    if len(argv) == 1:
        parser.print_help()
        sys.exit()
    outFile = options.outFile
    alpha = float(options.alpha)
    wr = int(options.wr)
    wt = int(options.wt)
    wStep = int(options.wStep)
    rMax = float(options.rMax)
    rMin = float(options.rMin)
    numSamples = int(options.numSamples)
    minMAF = float(options.minMAF)
    L = int(options.L)
    minp = float(options.minp)
    seed = int(options.seed)
    if seed != 0: np.random.seed(seed)
    if wt > wr:
        sys.stderr.write("Testing window larger than approx window."
                         " Resetting approx window.\n")
        wr=wt

    if (not options.fbase) or (not options.outFile):
        parser.error("You must provide a base file, and output file")
    if not options.sMode and not options.tMode and not options.cMode \
            and not options.rMode:
        parser.error("You must specify a run mode.")

    # Reading File input
    if options.cMode:
        alphaC_Z, alphaC_J = collect.collect(options.fbase,alpha)
        effNumTestsZ = alpha/alphaC_Z
        effNumTestsJ = alpha/alphaC_J
        alphaC_J.to_csv(outFile+'.alphaJ.txt', sep = '\t',float_format='%.5g')
        effNumTestsJ.to_csv(outFile+'.ENTJ.txt', sep='\t', float_format='%.5g')
        f = open( outFile + '.txt', 'w')
        f.write("Approximate level-alpha threashold:" + str(alphaC_Z) + '\n')
        f.write("Approximate effective number of tests:"+str(effNumTestsZ)+'\n')
        f.close()
    else:
        if options.verbose: sys.stdout.write("Reading SNP input...\n")
        IN = input.plink(options.fbase, type=options.ftype,
                         phenoFile=options.phenoFile,
                         sampleFile=options.sampleFile,
                         covFile=options.covFile,
                         normGenotype=options.normalizeGenotype,
                         remMissing=options.removeMissing,
                         noMean=options.noMean)
        if options.sMode:
            ZpVals, JpVals = sampleReg.sample(IN,wt,wr,wStep,rMin,rMax,options.rRange,
                                           numSamples,minMAF,options.twoWindows,
                                           options.verbose,options.LMO,
                                           options.from_bp,options.to_bp,L)
            ZpVals.to_pickle( outFile + '.Z.pkl' )
            JpVals.to_pickle( outFile + '.J.pkl' )
        elif options.ftype == 's' and options.rFile:
            joint_res = test_summary(IN, options.rFile, options.frqFile, wt,
                                     rMin, rMax, options.verbose,  minp, L)
            joint_res.to_csv(outFile+'.joint.out',sep='\t',na_rep='NA',
                             float_format='%.5g')
        elif options.tMode:
            joint_res, marg_res, chi_res = test.test(IN, wt, rMin, rMax, options.verbose,
                                       options.crossTest, minp, L)
            joint_res.to_csv(outFile+'.joint.out',sep='\t',na_rep='NA',
                             float_format='%.5g')
            marg_res.to_csv(outFile+'.marg.out',sep='\t',na_rep='NA',
                            float_format='%.5g')
            chi_res.to_csv(outFile+'.chis.out',sep='\t',na_rep='NA',
                            float_format='%.5g')
        elif options.rMode:
            cor_res = correlate(IN, wt, rMin, rMax, minMAF, options.verbose, L)
            cor_res.to_csv(outFile+'.corr.out',sep='\t',na_rep='NA',
                           float_format='%.5g')

if __name__ == '__main__':
    main(sys.argv)
