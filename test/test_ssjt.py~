N = 5000
b1j = 0.1
b2j = 0.1
p1=0.5
p2=0.5

g1a = np.random.binomial(1,p1,N)
t2a = np.random.binomial(1,p1,N)
u2a = np.random.binomial(1,abs(r),N)
g1b = np.random.binomial(1,p2,N)
t2b = np.random.binomial(1,p2,N)
u2b = np.random.binomial(1,abs(r),N)
if r >= 0:
    g2a = ((1-u2a)*t2a+u2a*g1a)
    g2b = ((1-u2b)*t2b+u2b*g1b)
else:
    g2a = (((1-u2a)*t2a+u2a*g1a)+1)%2
    g2b = (((1-u2b)*t2b+u2b*g1b)+1)%2
g1 = g1a+g1b
g2 = g2a+g2b



n = np.min((nCase1+nCont1,nCase2+nCont2))
cf1 = nCase1/(nCase1+nCont1)
cf2 = nCase2/(nCase2+nCont2)
varY = (cf1*(1-cf1)+cf2*(1-cf2))/2.0
den = 1.0/(1-r**2)
hv1 = 2*n*maf1*(1.0-maf1)
hv2 = 2*n*maf2*(1.0-maf2)
hcv = np.sqrt(hv1*hv2)*r
XXTIhat = np.array([[hv2,hcv],[hcv,hv1]])/(hv1*hv2-hcv**2)

B1J = den*(beta1 - r*beta2)
B2J = den*(beta2 - r*beta1)

resid = varY*(n/(n-2)) - (B1J*hv1*beta1 + B2J*hv2*beta2)/(n-2)
varBJ = resid*XXTIhat
B1JSE = varBJ[0,0]
B2JSE = varBJ[1,1]
OR1J = np.exp(B1JSE)
OR2J = np.exp(B2JSE)
T1J = B1J/B1JSE
T2J = B2J/B2JSE
pV1J = 1-stats.t.cdf(T1J, n-2)
pV2J = 1-stats.t.cdf(T2J, n-2)
chiJ, pJ = JT(beta1, beta2, pV1, pV2, r)
